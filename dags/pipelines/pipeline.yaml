schema: "https://myorg.com/schemas/pipeline/v1"
pipeline:
  name: "globalise_etl_pipeline"
  description: "Reads data from Django API"
  schedule: "@daily"
#  params:
#    location: ""  # Default value

  tasks:
    fetch_api_with_page:
      type: "FetchAPIWithPageOperator"
      table_name: "location"
      distance: 4
      output_trace: "ttl"
      output_store: "ttl"
#    test_comunica:
#      type: "EmitTTLOperator"
#      input_file_path: "http://util-server:8000/static/output.ttl"
#      output_store: "ttl"
#      output_trace: "ttl"

    save_file_ttl:
      type: "SaveFileTTLOperator"
      output_trace: "ttl"
      output_store: "ttl"

    run_sparql_comunica:
      type: "RunSparqlComunicaOperator"
      docker_image: "comunica/query-sparql"
      docker_network: "traefik-public"
      docker_rdf_file: "http://nginx/output.ttl"
      docker_output_format: "text/csv"
      output_trace: "csv"
      output_store: "csv"
#      query: "/tmp/query.sparql"
      query: "
SELECT *  {
?location a <http://example.globalise.nl/temp/location>;
   	<http://example.globalise.nl/temp/location/_label> ?_label.
    
OPTIONAL { ?location <http://example.globalise.nl/temp/location/glob_id> ?glob_id. }

OPTIONAL { ?location <http://example.globalise.nl/temp/location/coord_certainty> ?coord_certainty. }

OPTIONAL { ?location <http://example.globalise.nl/temp/location/comments> ?comments. }

OPTIONAL {        
    ?location <http://example.globalise.nl/temp/location/latitude> ?latitude;
    	<http://example.globalise.nl/temp/location/longitude> ?longitude.
}

OPTIONAL { ?location <http://example.globalise.nl/temp/location/point> ?point. }
    
OPTIONAL {
    ?_cs <http://example.globalise.nl/temp/location2coordsource/location> ?location;
    	<http://example.globalise.nl/temp/location2coordsource/source> ?_coordsource.
	?_coordsource <http://example.globalise.nl/temp/source/page_no> ?coordsource_page_no;
    	<http://example.globalise.nl/temp/source/zotero_url> ?coordsource_zotero_url.
         OPTIONAL { ?_coordsource <http://example.globalise.nl/temp/source/comments> ?coordsource_comments. }
}

OPTIONAL {
	?_ls <http://example.globalise.nl/temp/location2source/location> ?location;
    	<http://example.globalise.nl/temp/location2source/source> ?_source.
	?_source <http://example.globalise.nl/temp/source/page_no> ?source_page_no;
    	<http://example.globalise.nl/temp/source/zotero_url> ?source_zotero_url.
 OPTIONAL { ?_source <http://example.globalise.nl/temp/source/comments> ?source_comments. }
}

OPTIONAL {
	?_ll <http://example.globalise.nl/temp/locationlabel/location> ?location;
        <http://example.globalise.nl/temp/locationlabel/label> ?_l.
	?_l	<http://example.globalise.nl/temp/label/label> ?label;
    	<http://example.globalise.nl/temp/label/type> ?label_type.
  OPTIONAL { ?_l <http://example.globalise.nl/temp/label/comments> ?label_comments. }
}
}
"
    csv_iterator:
      type: "CSVIteratorOperator"
      output_trace: "csv"
      tasks:
        json_to_csv_row:
          type: "JSONToCSVOperator"
#        print_csv_row:
#          type: "PrintOperator"
        generate_sparql_per_csv_row:
          type: "XSLTTransformationOperator"
          fields_file: "https://raw.githubusercontent.com/globalise-huygens/gl-etl/refs/heads/main/locations/fields.xml"
          xslt_file: "https://raw.githubusercontent.com/globalise-huygens/gl-etl/refs/heads/main/src/toSPARQL.xsl"
          xslt_params:
            lookup-uri: "https://raw.githubusercontent.com/globalise-huygens/gl-etl/refs/heads/main/locations/lookup.xml"
            ns-uri: "https://raw.githubusercontent.com/globalise-huygens/gl-etl/refs/heads/main/locations/GLBM_2.xml"
            root-uri: "https://raw.githubusercontent.com/globalise-huygens/gl-etl/refs/heads/main/locations/root.xml"
          output_trace: "sparql"
          output_store: "sparql"
        generate_ttl_per_csv_row:
          type: "CSVToTTLOperator"
          base_uri: "http://example.globalise.nl/temp/location"
        run_sparql_on_csv_ttl_row:
          type: "RunSparqlComunicaOperator"
          docker_image: "comunica/query-sparql"
          docker_network: "traefik-public"
          docker_rdf_file: "file_uri:ttl"
          docker_output_format: "text/turtle"
          output_trace: "ttl"
          output_store: "ttl"
          query: "file_uri:sparql"
        collect_ttl_rows:
          type: "CSVCollectorOperator"
          message_queue: "all_the_rows"
    get_unique_places:
      type: "SplitGraphOperator"
      message_queue: "all_the_rows"
      output_trace: "ttl"
      output_store: "ttl"

